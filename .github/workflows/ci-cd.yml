name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Docker image
        run: |
          docker build -t selena-hotel-service .

      - name: Run tests (если у тебя есть тесты)
        run: |
          docker run selena-hotel-service echo "Container is running"

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up KUBECONFIG
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          chmod 600 ~/.kube/config
          export KUBECONFIG=~/.kube/config
          echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV

      - name: Debug KUBECONFIG
        run: |
          echo "Using KUBECONFIG at $KUBECONFIG"
          ls -la ~/.kube
          cat ~/.kube/config || echo "No kubeconfig found"
          kubectl config view --minify --flatten

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          # Ensure that the SSH private key is added to the SSH agent
          eval $(ssh-agent -s)
          ssh-add ~/.ssh/id_ed25519

      - name: Verify kubectl connection
        run: |
          kubectl version --client
          kubectl --insecure-skip-tls-verify=true get nodes

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
